package cpu

func opcodes(chip *CPU) [256]func() int {
	return [256]func() int{
		// Row 0x
		chip.op_NOP,
		chip.op_LD_BC_nn,
		chip.op_LD_BC_A,
		chip.op_INC_BC,
		chip.op_INC_B,
		chip.op_DEC_B,
		chip.op_LD_B_n,
		nil,
		chip.op_LD_nn_SP,
		chip.op_ADD_HL_BC,
		nil,
		chip.op_DEC_BC,
		chip.op_INC_C,
		chip.op_DEC_C,
		chip.op_LD_C_n,
		nil,
		// Row 1x
		nil,
		chip.op_LD_DE_nn,
		chip.op_LD_DE_A,
		chip.op_INC_DE,
		chip.op_INC_D,
		chip.op_DEC_D,
		chip.op_LD_D_n,
		chip.op_RL_A,
		chip.op_JR_e,
		chip.op_ADD_HL_DE,
		chip.op_LD_A_DE,
		chip.op_DEC_DE,
		chip.op_INC_E,
		chip.op_DEC_E,
		chip.op_LD_E_n,
		chip.op_RRA,
		// Row 2x
		chip.op_JR_NZ_e,
		chip.op_LD_HL_nn,
		chip.op_LD_HL_plus_A,
		chip.op_INC_HL,
		chip.op_INC_H,
		chip.op_DEC_H,
		chip.op_LD_H_n,
		nil,
		chip.op_JR_Z_e,
		chip.op_ADD_HL_HL,
		chip.op_LD_A_HL_plus,
		chip.op_DEC_HL,
		chip.op_INC_L,
		chip.op_DEC_L,
		chip.op_LD_L_n,
		chip.op_CPL,
		// Row 3x
		chip.op_JR_NC_e,
		chip.op_LD_SP_nn,
		chip.op_LD_HL_sub_A,
		nil,
		chip.op_INC_HL_indirect,
		chip.op_DEC_HL_indirect,
		chip.op_LD_HL_n,
		nil,
		chip.op_JR_C_e,
		chip.op_ADD_HL_SP,
		nil,
		chip.op_DEC_SP,
		chip.op_INC_A,
		chip.op_DEC_A,
		chip.op_LD_A_n,
		chip.op_CCF,
		// Row 4x
		chip.op_LD_B_B,
		chip.op_LD_B_C,
		chip.op_LD_B_D,
		chip.op_LD_B_E,
		chip.op_LD_B_H,
		chip.op_LD_B_L,
		chip.op_LD_B_HL,
		chip.op_LD_B_A,
		chip.op_LD_C_B,
		chip.op_LD_C_C,
		chip.op_LD_C_D,
		chip.op_LD_C_E,
		chip.op_LD_C_H,
		chip.op_LD_C_L,
		chip.op_LD_C_HL,
		chip.op_LD_C_A,
		// Row 5x
		chip.op_LD_D_B,
		chip.op_LD_D_C,
		chip.op_LD_D_D,
		chip.op_LD_D_E,
		chip.op_LD_D_H,
		chip.op_LD_D_L,
		chip.op_LD_D_HL,
		chip.op_LD_D_A,
		chip.op_LD_E_B,
		chip.op_LD_E_C,
		chip.op_LD_E_D,
		chip.op_LD_E_E,
		chip.op_LD_E_H,
		chip.op_LD_E_L,
		chip.op_LD_E_HL,
		chip.op_LD_E_A,
		// Row 6x
		chip.op_LD_H_B,
		chip.op_LD_H_C,
		chip.op_LD_H_D,
		chip.op_LD_H_E,
		chip.op_LD_H_H,
		chip.op_LD_H_L,
		chip.op_LD_H_HL,
		chip.op_LD_H_A,
		chip.op_LD_L_B,
		chip.op_LD_L_C,
		chip.op_LD_L_D,
		chip.op_LD_L_E,
		chip.op_LD_L_H,
		chip.op_LD_L_L,
		chip.op_LD_L_HL,
		chip.op_LD_L_A,
		// Row 7x
		chip.op_LD_HL_B,
		chip.op_LD_HL_C,
		chip.op_LD_HL_D,
		chip.op_LD_HL_E,
		chip.op_LD_HL_H,
		chip.op_LD_HL_L,
		nil,
		chip.op_LD_HL_A,
		chip.op_LD_A_B,
		chip.op_LD_A_C,
		chip.op_LD_A_D,
		chip.op_LD_A_E,
		chip.op_LD_A_H,
		chip.op_LD_A_L,
		chip.op_LD_A_HL,
		chip.op_LD_A_A,
		// Row 8x
		chip.op_ADD_B,
		chip.op_ADD_C,
		chip.op_ADD_D,
		chip.op_ADD_E,
		chip.op_ADD_H,
		chip.op_ADD_L,
		chip.op_ADD_HL,
		chip.op_ADD_A,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		// Row 9x
		chip.op_SUB_B,
		chip.op_SUB_C,
		chip.op_SUB_D,
		chip.op_SUB_E,
		chip.op_SUB_H,
		chip.op_SUB_L,
		chip.op_SUB_HL,
		chip.op_SUB_A,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		// Row Ax
		chip.op_AND_B,
		chip.op_AND_C,
		chip.op_AND_D,
		chip.op_AND_E,
		chip.op_AND_H,
		chip.op_AND_L,
		nil,
		chip.op_AND_A,
		chip.op_XOR_B,
		chip.op_XOR_C,
		chip.op_XOR_D,
		chip.op_XOR_E,
		chip.op_XOR_H,
		chip.op_XOR_L,
		chip.op_XOR_HL,
		chip.op_XOR_A,
		// Row Bx
		chip.op_OR_B,
		chip.op_OR_C,
		chip.op_OR_D,
		chip.op_OR_E,
		chip.op_OR_H,
		chip.op_OR_L,
		chip.op_OR_HL,
		chip.op_OR_A,
		chip.op_CP_B,
		chip.op_CP_C,
		chip.op_CP_D,
		chip.op_CP_E,
		chip.op_CP_H,
		chip.op_CP_L,
		chip.op_CP_HL,
		chip.op_CP_A,
		// Row Cx
		chip.op_RET_NZ,
		chip.op_POP_BC,
		chip.op_JP_NZ_nn,
		chip.op_JP_nn,
		chip.op_CALL_NZ_nn,
		chip.op_PUSH_BC,
		chip.op_ADD_n,
		chip.op_RST_0x00,
		chip.op_RET_Z,
		chip.op_RET,
		chip.op_JP_Z_nn,
		chip.op_CB_op,
		chip.op_CALL_Z_nn,
		chip.op_CALL_nn,
		chip.op_ADC_n,
		chip.op_RST_0x08,
		// Row Dx
		chip.op_RET_NC,
		chip.op_POP_DE,
		chip.op_JP_NC_nn,
		nil, // No opcode
		chip.op_CALL_NC_nn,
		chip.op_PUSH_DE,
		chip.op_SUB_n,
		chip.op_RST_0x10,
		chip.op_RET_C,
		nil,
		chip.op_JP_C_nn,
		nil, // No opcode
		chip.op_CALL_C_nn,
		nil, // No opcode
		nil,
		chip.op_RST_0x18,
		// Row Ex
		chip.op_LDH_n_A,
		chip.op_POP_HL,
		chip.op_LDH_C_A,
		nil, // No opcode
		nil, // No opcode
		chip.op_PUSH_HL,
		chip.op_AND_n,
		chip.op_RST_0x20,
		nil,
		chip.op_JP_HL,
		chip.op_LD_nn_A,
		nil, // No opcode
		nil, // No opcode
		nil, // No opcode
		chip.op_XOR_n,
		chip.op_RST_0x28,
		// Row Fx
		chip.op_LDH_A_n,
		chip.op_POP_AF,
		nil,
		chip.op_DI,
		nil, // No opcode
		chip.op_PUSH_AF,
		nil,
		chip.op_RST_0x30,
		nil,
		nil,
		chip.op_LD_A_nn,
		nil,
		nil, // No opcode
		nil, // No opcode
		chip.op_CP_n,
		chip.op_RST_0x38,
	}
}
